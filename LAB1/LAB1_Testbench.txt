LIBRARY ieee;
USE ieee.std_logic_1164.ALL;
use ieee.numeric_std.all;
use ieee.std_logic_UNSIGNED.all;
use ieee.std_logic_ARITH.all;
 
-- Uncomment the following library declaration if using
-- arithmetic functions with Signed or Unsigned values
--USE ieee.numeric_std.ALL;
 
ENTITY WcounterTB IS
END WcounterTB;
 
ARCHITECTURE behavior OF WcounterTB IS
  -- Component Declaration for the Unit Under Test (UUT)
  COMPONENT Wcounter
    PORT(
      Rst : IN  std_logic;
      Clock : IN  std_logic;
      Control : IN  std_logic_vector(2 downto 0);
      Count : OUT  std_logic_vector(7 downto 0);
      Overflow : OUT  std_logic;
      Underflow : OUT  std_logic;
      Valid : OUT  std_logic
    );
  END COMPONENT;


      --Inputs
  signal Rst : std_logic := '0';
  signal Clock : std_logic := '0';
  signal Control : std_logic_vector(2 downto 0) := (others => '0');

  --Outputs
  signal Count : std_logic_vector(7 downto 0);
  signal Overflow : std_logic;
  signal Underflow : std_logic;
  signal Valid : std_logic;

  -- Clock period definitions
  constant Clock_period : time := 10 ns;


 
BEGIN
  -- Instantiate the Unit Under Test (UUT)
  uut: Wcounter PORT MAP (
    Rst => Rst,
    Clock => Clock,
    Control => Control,
    Count => Count,
    Overflow => Overflow,
    Underflow => Underflow,
    Valid => Valid
  );


   -- Clock process definitions
   Clk_process :process
   begin
		Clock <= '0';
		wait for Clock_period/2;
		Clock <= '1';
		wait for Clock_period/2;
   end process;


      -- Stimulus process
   stim_proc: process
   begin		
      -- hold reset state for 100 ns.
		--counting and test underflow
		RST<='1';
      wait for 100 ns;
		RST<='0';
	Control<="011";
		wait for 10 ns;
		--underflow and freeze 
		Control<="000";
		wait for 10 ns;
		Control<="010";
		wait for 10 ns;
		Control<="110";
		wait for 10 ns;
		Control<="001";
		wait for 10 ns;
		Control<="100";
		wait for 10 ns;
		Control<="101";
		wait for 10 ns;
		Control<="111";
		--reset from underflow and counting in different steps
		RST<='1';
		wait for 100 ns;
		RST<='0';
		wait for 10 ns;
		Control<="111";
		wait for 10 ns;
		Control<="010";
		wait for 10 ns;
		Control<="011";
		wait for 10 ns;
		Control<="110";
		wait for 10 ns;
		Control<="101";
		wait for 10 ns;
		Control<="000";
		wait for 10 ns;
		Control<="001";
		wait for 10 ns;
		Control<="100";
		wait for 10 ns;
--overflow and freeze
		Control<="111";
		wait for 200 ns;
		Control<="101";
		wait for 10 ns;
		Control<="000";
		wait for 10 ns;
		Control<="001";
		wait for 10 ns;
		Control<="010";
		wait for 10 ns;
		Control<="011";
		wait for 10 ns;
		Control<="100";
		wait for 10 ns;
		Control<="110";
		--reset from overflow
		RST<='1';
		wait for 100 ns;
		RST<='0';
		Control<="110";
		wait for 10 ns;
		Control<="000";
		wait for 10 ns;
		Control<="010";
      wait for Clock_period*10;
-- insert stimulus here 

      wait;
   end process;

END;

